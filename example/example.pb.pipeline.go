// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: example/example.proto

package example

import (
	"bytes"
	"errors"
	"fmt"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = time.Duration(0)
	_ = ptypes.DynamicAny{}
)

func (m *Example) Pipeline() error {
	if m == nil {
		return nil
	}

	m.Text = strings.TrimSpace(m.GetText())

	if wrapper := m.GetWrapText(); wrapper != nil {

		wrapper.Value = strings.TrimSpace(wrapper.GetValue())

	}

	for idx, item := range m.GetTexts() {
		_, _ = idx, item

		m.Texts[idx] = strings.TrimSpace(item)

	}

	{
		tmp := m.GetInner()

		if v, ok := interface{}(tmp).(interface{ Pipeline() error }); ok {

			if err := v.Pipeline(); err != nil {
				return ExamplePipelineError{
					field:  "Inner",
					reason: "embedded message failed pipeline",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ExamplePipelineError is the pipeline error returned by Example.Pipeline if
// the designated constraints aren't met.
type ExamplePipelineError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamplePipelineError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamplePipelineError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamplePipelineError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamplePipelineError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamplePipelineError) ErrorName() string { return "ExamplePipelineError" }

// Error satisfies the builtin error interface
func (e ExamplePipelineError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExample.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamplePipelineError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamplePipelineError{}

func (m *Example_Inner) Pipeline() error {
	if m == nil {
		return nil
	}

	m.Text = strings.TrimSpace(m.GetText())

	if wrapper := m.GetWrapText(); wrapper != nil {

		wrapper.Value = strings.TrimSpace(wrapper.GetValue())

	}

	for idx, item := range m.GetTexts() {
		_, _ = idx, item

		m.Texts[idx] = strings.TrimSpace(item)

	}

	{
		tmp := m.GetInner()

		if v, ok := interface{}(tmp).(interface{ Pipeline() error }); ok {

			if err := v.Pipeline(); err != nil {
				return Example_InnerPipelineError{
					field:  "Inner",
					reason: "embedded message failed pipeline",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// Example_InnerPipelineError is the pipeline error returned by
// Example_Inner.Pipeline if the designated constraints aren't met.
type Example_InnerPipelineError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Example_InnerPipelineError) Field() string { return e.field }

// Reason function returns reason value.
func (e Example_InnerPipelineError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Example_InnerPipelineError) Cause() error { return e.cause }

// Key function returns key value.
func (e Example_InnerPipelineError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Example_InnerPipelineError) ErrorName() string { return "Example_InnerPipelineError" }

// Error satisfies the builtin error interface
func (e Example_InnerPipelineError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExample_Inner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Example_InnerPipelineError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Example_InnerPipelineError{}
